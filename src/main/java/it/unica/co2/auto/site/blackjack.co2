
single package it.unica.co2.auto.site

honesty P

/*
 * contracts
 */
// between the dealer and the player
contract Cp {
	hit?. (card! int.Cp (+) lose! (+) abort!)   
	+ stand? . (win! (+) lose! (+) abort!)
}

// between the dealer and the desk service
contract Cd { 
	next!. card?int .Cd (+) abort! 
}

/*
 * specification
 */
specification P {
	tell xd Cd .	
	tell xp Cp . Pplay(xp, xd, 0) 
	after * -> send@xd abort!
}

specification Pplay(xp:session, xd:session, np:int) {
	
	receive {
		@xp  hit? -> send@xd next! . Pdeck(xp, xd, np)
		@xp  stand? -> Qstand(xp,xd,np,0)
		after * -> send@xd abort! . PabortP(xp) 
	}
}

specification Pdeck(xp:session, xd:session, np:int) {
	receive {
		@xd card?[n:int] -> Pcard(xp,xd,np+n,n)
		after * -> send@xp abort! . PabortD(xd)
	}
}

specification Pcard(xp:session, xd:session, np:int, n:int) {
	if np<21
	then send@xp card![n] . Pplay(xp,xd,np)
	else send@xp lose! . PabortD(xd)
}

specification Qstand(xp:session, xd:session, np:int, nd:int) {
	if nd<21
	then send@xd next! . Qdeck(xp,xd,np,nd)
	else send@xp win! . send@xd abort!
}

specification Qdeck(xp:session, xd:session, np:int, nd:int) {
	receive {
		@xd card?[n:int] -> Qcard(xp,xd,np,nd)
		after * -> send@xp abort!. PabortD(xd)
	}
}

specification Qcard(xp:session, xd:session, np:int, nd:int) {
	if nd<np
	then Qstand(xp,xd,np,nd)
	else send@xp lose! . PabortD(xd)
}

specification PabortP(xp:session) {
	receive@xp  hit? stand?. send@xp abort!
}

specification PabortD(xd:session) {
	send@xd abort! 
	| receive@xd card?[n:int] . send@xd abort!
}