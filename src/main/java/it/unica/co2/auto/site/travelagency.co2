
single package it.unica.co2.auto.site

honesty P

/*
 * contracts
 */
// between the travel agency and the customer
contract Cu {
	tripDets? string. budget? int . (quote! int. pay? . (commit! (+) abort!) (+) abort!)
}

// between the travel agency and the flying company
contract Cf {
	flightDets! string . D
}

// between the travel agency and the hotel reservation service
contract Ch {
	hotelDets! string . D
}

contract D {
	quote? int . (
		pay! . (confirm? . ( commit! (+) abort! ) )
		(+) abort!
	)
}

/*
 * specification
 */
specification P {
	tell xu Cu . 
	receive@xu tripDets?[yt:string] . 
	receive@xu budget?[bud:int] . P1(xu,yt,bud)
}

specification P1 (xu: session, yt:string, bud:int) {
	tellAndReturn xf Cf.
	tellAndReturn xh Ch . (
		send@xf flightDets![yt]
		| send@xh hotelDets![yt]
		| Pquote(xu,xf,xh,bud)	
	)
}

specification Pquote (xu:session, xf:session, xh:session, bud:int) {
	receive {
		@xf quote?[n:int] -> Pquote1(xu,xf,xh,n,bud)
		@xh quote?[n:int] -> Pquote1(xu,xh,xf,n,bud) 
		after * -> Pabort(xu,xh,xf)
	}
}

specification Pquote1 (x:session, x1:session, x2:session, quote:int, budget:int) {
	if quote<budget
	then Pquote2(x,x1,x2,quote,budget)
	else Pabort(x,x1,x2)
}

specification Pquote2 (x:session, x1:session, x2:session, quote:int, budget:int) {
	receive {
		@x2 quote?[quote2:int] -> 
			if quote+quote2<budget
			then Ppay(x,x1,x2,quote+quote2)
			else Pabort(x,x1,x2)
		after * -> Pabort(x,x1,x2)
	}
}

specification Pabort (x:session, x1:session, x2:session) {
	send@x abort! | send@x1 abort! | send@x2 abort! |
	receive@x pay? |
	receive@x1 quote?[n:int] | receive@x2 quote?[n:int] | 
	receive@x1 confirm? | receive@x2 confirm?
}

specification Ppay (x:session, x1:session, x2:session, amount:int) {
	send@x quote![amount] . (
		receive {
			@x pay? -> Pconfirm1(x,x1,x2)
			after * -> Pabort(x,x1,x2)
		}
	)
}

specification Pconfirm1 (x:session, x1:session, x2:session) {
	send@x1 pay!. send@x2 pay! . (
		receive { 
			@x1 confirm? -> Pconfirm2(x,x1,x2)
			after * -> Pabort(x,x1,x2)
		}
	)
}

specification Pconfirm2 (x:session, x1:session, x2:session) {
	receive {
		@x2 confirm? -> Pcommit(x,x1,x2)
		after * -> Pabort(x,x1,x2)
	}
}

specification Pcommit (x:session, x1:session, x2:session) {
	send@x commit! . 
	send@x1 commit! . 
	send@x2 commit!
}
