single package it.unica.co2.auto.site

honesty Store

/*
 * contract
 */
contract C {
	addToCart? int . Cadd
}

contract Cadd {
	addToCart? int . Cadd 
	+ checkout? . Cpay
}

contract Cpay {
	pay? string . (
		ok! 
		(+) no!.Cpay 
		(+) abort!
	) 
	+ cancel?
}

/*
 * specification
 */
specification Store {
	tell x C . 
	receive@x addToCart?[n:int] . Padd(x,n)
}

specification Padd (x:session, total:int) {
	receive {
		@x addToCart?[n:int] -> Padd(x, total+n)
		@x checkout? -> Ppay(x, total)
	}
}

specification Ppay (x:session, amount:int) {
	receive { 
		@x pay?[s:string] -> Pack(x,amount) 
		@x cancel?
	}
}

specification Pack (x:session, amount:int) {
	if amount<100 
	then send@x ok! 
	else send@x no!.Ppay(x,amount)
}


