
package it.unica.co2.auto.betty

honesty BuyerA BuyerB


/*
 * Store, BuyerA, BuyerB
 */
contract C {
	order? string . ( price! int (+) unavailable! )
}

specification Store {
    tellAndReturn x C .
    receive@x order?[v:string] . (
        if *:boolean
        then send@x price![*:int]
        else send@x unavailable! 
    ) 
}

//specification BuyerA {
//    tell x { order! string . price? int } .
//    send@x order![*:string] .
//    receive@x price?[n:int] }
//
//specification BuyerB {
//    tell x { order! string . ( price? int + unavailable? + availablefrom? string) } .
//    send@x order![*:string] .
//    receive {
//          @x price?[n:int]
//          @x unavailable?
//          @x availablefrom? [date:string] }}


specification BuyerA {
    tell y { order! string . price? int } .
    send@y order![*:string] .
    receive@y price?[n:int] 
}

specification BuyerB {
    tell y { order! string . ( price? int + unavailable?                      + availablefrom? string) } .
    send@y order![*:string] .
    receive {
        @y price?[n:int]
        @y unavailable?
        @y availablefrom?[date:string]}
}

/*
 * Store2 (recursive)
 */
contract C2 {  
	checkout? . ( 
   		price! int . (accept? + reject?)
   		(+) unavailable!
   	) 
    + addToCart? string . C2
}

contract D1 {
	req! string . ( ok? + no? )
}

specification Store2 {
    tell x C2 . StoreCart(x)
}

specification StoreCart(x:session) {
	receive {
		@x addToCart?[item:string] -> StoreCart(x)
		@x checkout? -> (
			tell y D1 .
				send@y req![*:string] .
				receive {
					@y ok?  -> send@x price![*:int] . receive {
							@x accept?							@x reject?
						}
					@y no?  -> send@x unavailable!
					after * -> (
						send@x unavailable! |
						receive @y ok? no? 
					)				
				}
			after * -> send@x unavailable!	
		)
	}
}

/********************************** Honesty *************************************/

/*
 * StoreDishonest
 */
specification StoreDishonest1 {
    tellAndReturn x C .
    receive@x order?[v:string] . (
        if *:boolean
        then send@x price![*:int]
    ) 
}

/*
 * StoreDishonest2
 */
contract D {
	req! string . ( ok? + no? )
}

specification StoreDishonest2 {
	tell x C .
	receive@x order?[v:string] . (  
		tell y D . (
			send@y req![v] . 
			receive {
				@y ok? -> send@x price![*:int]
				@y no? -> send@x unavailable!
			}
		)
	)
}

specification StoreDishonest3 {
    tell x C .
    receive@ x order?[v:string] .
        tell y D .
        send@ y req![*:string] .
        receive {
            @y ok? -> send@x price![*:int]
            @y no? -> send@x unavailable!
        }
	    after * -> send @x unavailable!
}

/*
 * StoreHonest
 */
specification StoreHonest {
    tell x C .
    receive@x order?[v:string] . (
        tell y D . (
            send@y req![v] .
            receive {
                @y ok? -> send@x price![*:int]
                @y no? -> send@x unavailable!
	            after * -> (
	            	send@x unavailable! | receive {
	            		@y ok? -> nil
	            		@y no? -> nil
	            	}
	            )
            }
        )
        after * -> send@x unavailable!
   )
}
